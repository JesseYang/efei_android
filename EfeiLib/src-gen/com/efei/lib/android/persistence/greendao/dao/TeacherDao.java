package com.efei.lib.android.persistence.greendao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.efei.lib.android.persistence.greendao.Teacher;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEACHER.
*/
public class TeacherDao extends AbstractDao<Teacher, Long> {

    public static final String TABLENAME = "TEACHER";

    /**
     * Properties of entity Teacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TeacherId = new Property(1, String.class, "teacherId", false, "TEACHER_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Subject = new Property(3, String.class, "subject", false, "SUBJECT");
        public final static Property School = new Property(4, String.class, "school", false, "SCHOOL");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Avatar = new Property(6, String.class, "avatar", false, "AVATAR");
        public final static Property UserId = new Property(7, long.class, "userId", false, "USER_ID");
    };

    private Query<Teacher> user_TeacherListQuery;

    public TeacherDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEACHER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TEACHER_ID' TEXT," + // 1: teacherId
                "'NAME' TEXT," + // 2: name
                "'SUBJECT' TEXT," + // 3: subject
                "'SCHOOL' TEXT," + // 4: school
                "'DESC' TEXT," + // 5: desc
                "'AVATAR' TEXT," + // 6: avatar
                "'USER_ID' INTEGER NOT NULL );"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEACHER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Teacher entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String teacherId = entity.getTeacherId();
        if (teacherId != null) {
            stmt.bindString(2, teacherId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(4, subject);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(5, school);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(7, avatar);
        }
        stmt.bindLong(8, entity.getUserId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Teacher readEntity(Cursor cursor, int offset) {
        Teacher entity = new Teacher( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // teacherId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // subject
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // school
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // avatar
            cursor.getLong(offset + 7) // userId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Teacher entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTeacherId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSubject(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSchool(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatar(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserId(cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Teacher entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Teacher entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "teacherList" to-many relationship of User. */
    public List<Teacher> _queryUser_TeacherList(long userId) {
        synchronized (this) {
            if (user_TeacherListQuery == null) {
                QueryBuilder<Teacher> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_TeacherListQuery = queryBuilder.build();
            }
        }
        Query<Teacher> query = user_TeacherListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
