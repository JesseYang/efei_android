package com.efei.lib.android.persistence.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.efei.lib.android.persistence.greendao.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACCOUNT.
*/
public class AccountDao extends AbstractDao<Account, Void> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Email_mobile = new Property(0, String.class, "email_mobile", false, "EMAIL_MOBILE");
        public final static Property Password = new Property(1, String.class, "password", false, "PASSWORD");
        public final static Property AuthKey = new Property(2, String.class, "authKey", false, "AUTH_KEY");
        public final static Property LastLoginDate = new Property(3, java.util.Date.class, "lastLoginDate", false, "LAST_LOGIN_DATE");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' (" + //
                "'EMAIL_MOBILE' TEXT," + // 0: email_mobile
                "'PASSWORD' TEXT," + // 1: password
                "'AUTH_KEY' TEXT," + // 2: authKey
                "'LAST_LOGIN_DATE' INTEGER);"); // 3: lastLoginDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        String email_mobile = entity.getEmail_mobile();
        if (email_mobile != null) {
            stmt.bindString(1, email_mobile);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(2, password);
        }
 
        String authKey = entity.getAuthKey();
        if (authKey != null) {
            stmt.bindString(3, authKey);
        }
 
        java.util.Date lastLoginDate = entity.getLastLoginDate();
        if (lastLoginDate != null) {
            stmt.bindLong(4, lastLoginDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // email_mobile
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // password
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // authKey
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // lastLoginDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setEmail_mobile(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPassword(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAuthKey(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastLoginDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Account entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Account entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
